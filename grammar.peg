// Author: Jeeyoung Kim
// PEG grammar file.
// select COLUMNS where
// X = VALUE
// Y IN (VALUES)
// , for AND

{
  # helper functions
}

// language for querying metric definition/
// naming conventions
// statements - top level
// expr - sublevel.
// list - anything that homogenous list of things.
// literal - anything that resolves to regex.

start = SHOW_STATEMENT / SELECT_STATEMENT

SELECT_STATEMENT = "SELECT"i _ COMPUTE_EXPR_LIST _ PREDICATE_EXPR? _ GROUP_EXPR?

COMPUTE_EXPR_LIST = COMPUTE_EXPR (_ "," _ COMPUTE_EXPR)*

COMPUTE_EXPR =
  COMPUTE_ADD_EXPR

COMPUTE_ADD_EXPR =
  COMPUTE_MULT_EXPR _ [+-] _ COMPUTE_ADD_EXPR /
  COMPUTE_MULT_EXPR

COMPUTE_MULT_EXPR =
  COMPUTE_SINGLE_EXPR _ [*/] _ COMPUTE_MULT_EXPR /
  COMPUTE_SINGLE_EXPR

COMPUTE_SINGLE_EXPR =
  FUNCTION_LITERAL _ "(" _ COMPUTE_EXPR_LIST _ ")" /
  "(" COMPUTE_ADD_EXPR ")" /
  VARIABLE_LITERAL

GROUP_EXPR = "GROUP"i _ COLUMN_LIST

FUNCTION_LITERAL = [a-z]+

VARIABLE_LITERAL = [a-zA-Z0-9.]+

SHOW_STATEMENT =  "SHOW"i _ COLUMN_LIST _ PREDICATE_EXPR?

COLUMN_LIST = COLUMN (_ "," _ COLUMN)*

COLUMN = "*" / COLUMN_LITERAL

COLUMN_LITERAL = [a-zA-Z0-9.]+

PREDICATE_EXPR = "WHERE"i _ PREDICATES

PREDICATES = (PREDICATE _ "," _ PREDICATES) / PREDICATE

PREDICATE =
  COLUMN_LITERAL _ "=" _ VALUE_LITERAL /
  COLUMN_LITERAL _ "IN"i _ "(" _ VALUE_LIST _ ")"

VALUE_LIST = VALUE_LITERAL (_ "," _ VALUE_LITERAL)*

VALUE_LITERAL = "?" // TODO

NUMBER_LITERAL = [0-9]+

// represents ignorable whitespace.
_ = [ ]*
